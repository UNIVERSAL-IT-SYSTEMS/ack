REGISTERS

	r0  GPR RET0;
	r1  GPR RET1;
	r2  GPR;
	r3  GPR;
	r4  GPR;
	r5  GPR;
	r6  GPR;
	r7  GPR;
	r8  GPR;
	r9  GPR;
	r10 GPR;
	r11 GPR;

	cc  CC;

DECLARATIONS

	address   fragment;
	aluparam  fragment;
	reg       allocates(GPR);
	tristate  allocates(CC);
	bistate   allocates(CC);

PATTERNS

/* Special */

	reg;

	reg = REG_4I;

	PAIR(BLOCK_4P, BLOCK_4P);


/* Miscellaneous special things */

	PUSH_4I(in:reg)
		emit "push %in"
		cost 4;

	reg = POP_4I
		emit "pop %reg"
		cost 4;

	RET
		emit "ret"
		cost 4;

	SETRET_4I(in:reg)
		emit "mov r0, %in"
		cost 4;


/* Memory operations */

	STORE_4I(addr:address, value:reg)
		emit "str %value, %addr"
		cost 4;

	reg = LOAD_4I(addr:address)
		emit "ldr %reg, %addr"
		cost 4;

	reg = LOAD_1I(addr:address)
		emit "ldrb %reg, %addr"
		cost 4;

	reg = CIU1_4I(LOAD_1I(addr:address))
		emit "ldrb %reg, %addr"
		cost 4;
	
	reg = CII1_4I(CIU4_1I(CIU1_4I(LOAD_1I(addr:address))))
		emit "ldrsb %reg, %addr"
		cost 4;


/* Locals */

	reg = in:LOCAL_4I
		emit "add %reg, fp, #$in"
		cost 4;

	address = in:LOCAL_4I
		emit "[fp, #$in]";


/* Memory addressing modes */

	address = ADD_4I(addr:reg, offset:CONST_4I)
		emit "[%addr, #$offset]";

	address = addr:reg
		emit "[%addr]";


/* Branches */

	JUMP(addr:BLOCK_4I)
		emit "b $addr"
		cost 4;

	CJUMPEQ(value:tristate, PAIR(true:BLOCK_4I, false:BLOCK_4I))
		emit "beq $true"
		emit "b $false"
		cost 8;

	CJUMPEQ(value:bistate, PAIR(true:BLOCK_4I, false:BLOCK_4I))
		emit "beq $true"
		emit "b $false"
		cost 8;


/* Comparisons */

	tristate = COMPARES_4I(left:reg, right:aluparam)
		emit "cmp %left, %right"
		cost 4;

	bistate = COMPARES_4I(COMPARES_4I(left:reg, right:aluparam), CONST_4I)
		emit "cmp %left, %right"
		cost 4;

	reg = tristate
		emit "mov %reg, #0"
		emit "movlt %reg, #-1"
		emit "movgt %reg, #1"
		cost 12;

	reg = bistate
		emit "moveq %reg, #1"
		emit "movne %reg, #0"
		cost 8;


/* Conversions */

	reg = CII1_4I(CIU4_1I(value:reg))
		emit "sxtb %reg, %value"
		cost 4;

	reg = CIU4_1I(in:reg)
		emit "and %reg, %in, #0xff"
		cost 4;


/* ALU operations */

	reg = ADD_4I(left:reg, right:aluparam)
		emit "add %reg, %left, %right"
		cost 4;

	reg = ADD_4I(left:aluparam, right:reg)
		emit "add %reg, %right, %left"
		cost 4;

	aluparam = value:CONST_4I
		emit "#$value";

	aluparam = reg;

	reg = value:aluparam
		emit "mov %reg, %value"
		cost 4;

	reg = value:LABEL_4I
		emit "adr %reg, $value"
		cost 4;

	reg = value:BLOCK_4I
		emit "adr %reg, $value"
		cost 4;

	reg = value:CONST_4I
		emit "ldr %reg, label-for-$value"
		cost 8;

	reg = value:CONST_4F
		emit "ldr %reg, label-for-$value"
		cost 8;
